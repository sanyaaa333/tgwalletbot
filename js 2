const express = require('express');
const crypto = require('crypto');
const axios = require('axios');

const app = express();
const PORT = 3000;
const BOT_TOKEN = 'YOUR_BOT_TOKEN'; // Замените на реальный токен бота
const SECRET_PATH = '/payment-webhook'; // URL для вебхука

app.use(express.json());

// Верификация данных от Telegram
function verifyTelegramData(initData, botToken) {
  const data = new URLSearchParams(initData);
  const hash = data.get('hash');
  const items = Array.from(data.entries())
    .filter(([key]) => key !== 'hash')
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([k, v]) => `${k}=${v}`)
    .join('\n');

  const secret = crypto.createHash('sha256').update(botToken).digest();
  const calculatedHash = crypto.createHmac('sha256', secret).update(items).digest('hex');

  return calculatedHash === hash;
}

// Эмуляция базы данных пользователей
const usersDB = new Map(); // { userId: { balance: number } }

// Webhook для обработки платежей
app.post(SECRET_PATH, async (req, res) => {
  try {
    const { initData, amount, currency, userId } = req.body;

    // Проверяем данные от Telegram
    if (!verifyTelegramData(initData, BOT_TOKEN)) {
      return res.status(403).json({ error: 'Invalid data signature' });
    }

    // Обновляем баланс в "БД"
    const currentBalance = usersDB.get(userId)?.balance || 0;
    usersDB.set(userId, { balance: currentBalance + amount });

    // Отправляем уведомление пользователю
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: userId,
      text: `✅ Ваш баланс пополнен на ${amount} ${currency}! Новый баланс: ${currentBalance + amount}`
    });

    res.status(200).json({ success: true });
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Запуск сервера
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
